import FWCore.ParameterSet.Config as cms

analyzeKshort = cms.EDAnalyzer('V0RecoAnalyzer',
#    v0Collection = cms.InputTag('generalV0Candidates:Kshort'),
    v0Collection = cms.InputTag('produceV0PATCands:allVees'),
    pvAvailable = cms.bool(True),
    beamSpotAvailable = cms.bool(True),
    tracksAvailable = cms.bool(True),
    instanceName = cms.string('Kshort'),
    writeTree = cms.bool(False),
    writeHistos = cms.bool(True),
    ksMassXmin = cms.double(0.351),
    ksMassXmax = cms.double(0.751),
    ksMassNbins = cms.int32(200),
    ksMass_eta_nBins = cms.int32(10),
    ksMass_phi_nBins = cms.int32(12),
#    ksMass_pt_nBins  = cms.int32(5),
    ksMass_pt_nBinSubdiv = cms.int32(2),
    lamMassXmin = cms.double(1.08),
    lamMassXmax = cms.double(1.18),
    lamMassNbins = cms.int32(100),
    lamMass_eta_nBins = cms.int32(5),
    lamMass_phi_nBins = cms.int32(6),
#    lamMass_pt_nBins = cms.int32(5),
    lamMass_pt_nBinSubdiv = cms.int32(1)
)

analyzeLambda = cms.EDAnalyzer('V0RecoAnalyzer',
#    v0Collection = cms.InputTag('generalV0Candidates:Lambda'),
    v0Collection = cms.InputTag('produceV0PATCands:allVees'),
    instanceName = cms.string('Lambda'),
    pvAvailable = cms.bool(True),
    beamSpotAvailable = cms.bool(True),
    tracksAvailable = cms.bool(True),
    writeTree = cms.bool(False),
    writeHistos = cms.bool(True),
    ksMassXmin = cms.double(0.44), 
    ksMassXmax = cms.double(0.56),
    ksMassNbins = cms.int32(60),
    ksMass_eta_nBins = cms.int32(5),
    ksMass_phi_nBins = cms.int32(6),
#    ksMass_pt_nBins  = cms.int32(5),
    ksMass_pt_nBinSubdiv = cms.int32(1),
    lamMassXmin = cms.double(1.08),
    lamMassXmax = cms.double(1.18),
    lamMassNbins = cms.int32(100),
    lamMass_eta_nBins = cms.int32(5),
    lamMass_phi_nBins = cms.int32(6),
#    lamMass_pt_nBins = cms.int32(5),
    lamMass_pt_nBinSubdiv = cms.int32(1)
)
