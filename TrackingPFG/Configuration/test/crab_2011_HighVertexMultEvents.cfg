[CRAB]

jobtype = cmssw
#use_server = 1
#scheduler = glite
scheduler = caf
### NOTE: just setting the name of the server (pi, lnl etc etc )
###       crab will submit the jobs to the server...
#server_name = bari
#
[CMSSW]

### The data you want to access (to be found on DBS)

#dbs_url = http://cmsdbsprod.cern.ch/cms_dbs_ph_analysis_01/servlet/DBSServlet

datasetpath=/ZeroBiasHPF0/Run2011B-PromptReco-v1/RECO
#datasetpath=/MinimumBias/Run2011B-PromptReco-v1/RECO

  
pset=TrackingPFG/Configuration/python/HighVertexMultEventSkim_cfg.py

# forPrompt11
pycfg_params= globalTag=GR_P_V25::All hltPath=HLT_ZeroBias_* 
#pycfg_params= globalTag=GR_P_V22::All hltPath=HLT_ZeroBias_* 

lumi_mask=/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions11/7TeV/DCSOnly/json_DCSONLY.txt
#lumi_mask=/afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions11/7TeV/Prompt/Cert_160404-176023_7TeV_PromptReco_Collisions11_JSON.txt

runselection=178208

total_number_of_lumis =-1
lumis_per_job = 100


### The output files (comma separated list)
#output_file = oddevents.root

get_edm_output = 1

[USER]

### OUTPUT files Management
##  output back into UI
return_data = 0

### To use a specific name of UI directory where CRAB will create job to submit (with full path).
### the default directory will be "crab_0_data_time"

ui_working_dir = /afs/cern.ch/cms/tracking/output/HighVertexMultEventSkim_Run2011B_prompt_zerobiasHPF0_v1_HLT_ZeroBias_178208_v1


### To specify the UI directory where to store the CMS executable output
### FULL path is mandatory. Default is  <ui_working_dir>/res will be used.
#outputdir= /full/path/yourOutDir

### To specify the UI directory where to store the stderr, stdout and .BrokerInfo of submitted jobs
### FULL path is mandatory. Default is <ui_working_dir>/res will be used.
#logdir= /full/path/yourLogDir

### OUTPUT files INTO A SE
copy_data = 1

### if you want to copy data in a "official CMS site"
### you have to specify the name as written in 
#storage_element = T2_IT_Bari
### the user_remote_dir will be created under the SE mountpoint
### in the case of publication this directory is not considered
#user_remote_dir = name_directory_you_want

### if you want to copy your data at CAF
storage_element = T2_CH_CAF
### the user_remote_dir will be created under the SE mountpoint
### in the case of publication this directory is not considered
user_remote_dir = HighVertexMultEventSkim_Run2011B_prompt_zerobiasHPF0_v1_HLT_ZeroBias_178208_v1

### if you want to copy your data to your area in castor at cern
### or in a "not official CMS site" you have to specify the complete name of SE
#storage_element=srm-cms.cern.ch
### this directory is the mountpoin of SE 
#storage_path=/srm/managerv2?SFN=/castor/cern.ch
### directory or tree of directory under the mounpoint 

#user_remote_dir = /user/v/venturia/HighVertexMultEventSkim_Run2010B_nov4_jet_v1


### To publish produced output in a local istance of DBS set publish_data = 1
publish_data=0
### Specify the dataset name. The full path will be <primarydataset>/<publish_data_name>/USER
publish_data_name = name_you_prefer
### Specify the URL of DBS istance where CRAB has to publish the output files
#dbs_url_for_publication = https://cmsdbsprod.cern.ch:8443/cms_dbs_caf_analysis_01_writer/servlet/DBSServlet 

### To specify additional files to be put in InputSandBox
### write the full path  if the files are not in the current directory
### (wildcard * are allowed): comma separated list
#additional_input_files = file1, file2, /full/path/file3

#if server
#thresholdLevel = 100
#eMail = your@Email.address

[CAF]

queue = cmscaf1nd

[GRID]
#
## RB/WMS management:
rb = CERN

##  Black and White Lists management:
## By Storage
se_black_list = T0,T1
#se_black_list = T0
#se_white_list =

## By ComputingElement
#ce_black_list =
#ce_white_list =

[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))

